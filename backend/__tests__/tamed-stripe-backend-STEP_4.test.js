const stripeSK = require('../config.js').secretKey;
const stripe = require('stripe')(stripeSK);

const tickLog = require("tick-log");
const tsb = require("../tamed-stripe-backend.js");
const sqls = require("../sqls.js");
const { runSQL, } = require('tamed-pg');

let poolName;
const debugMode = false;

beforeAll(async () => {
	await tsb.init({
		debugMode,
		// coming from database-setup
		pgKeys: {
			user: 'tamedstripeapp',
			password: 'tamedstripeapp.',
			database: 'tamedstripedb',
			host: 'localhost',
			port: 5432,
		},
	});
	poolName = tsb.exportedForTesting.poolInfoForTests.poolName;

});

test('subscriptionPayment - next 2 months', async () => {
	const now = new Date().getTime();
	const l_applicationCustomerId =`Jest Application Customer-${now}`;
	const clockStartTime = Math.ceil(now / 1000);
	const clockNextMonth1 = Math.ceil(new Date(now).setMonth(new Date(now).getMonth() + 1) / 1000);
	const clockNextMonth2 = Math.ceil(new Date(now).setMonth(new Date(now).getMonth() + 2) / 1000);
	const testClock = await stripe.testHelpers.testClocks.create({
		frozen_time: clockStartTime,
		name: 'Subscription Payment Test Clock',
	});

	const description = `Jest Test generateSubscription - Pay next 2 months - ${now}`;
	const productName = `Product ${now}`;
	const productDescription = `Generated by JEST tests. Product ${now}`;
	const productCurrency = 'usd';
	const productAmount = "100001";
	const productProps = {
		name: productName,
		description: productDescription,
		currency: productCurrency,
		unitAmountDecimal: productAmount,
		interval: 'month',
	};
	const response2 = await tsb.generateProduct(productProps);
	if (debugMode) tickLog.error(`response2: ${JSON.stringify(response2)}`);
	const productData = response2.payload.product;
	const priceData = response2.payload.price;

	const paymentMethod = await stripe.paymentMethods.create({
		type: 'card',
		card: {
			number: '4242424242424242',
			exp_month: 12,
			exp_year: (new Date()).getYear() + 1900 + 1,
			cvc: '314',
		},
	});
	if (debugMode) tickLog.info(`paymentMethod: ${JSON.stringify(paymentMethod, null, 2)}`);

	const body = {
		applicationCustomerId: l_applicationCustomerId,
		description: `Jest Customer ${now}`,
		email: `subscriptionPaymentTestNext2Months-${now}@yopmail.com`,
		metadata: { "test": "test" },
		name: `Jest Customer ${now}`,
		phone: `1234567890`,
		address: { "line1": "1234 Main St", "city": "San Francisco", "state": "CA", "postal_code": "94111" },
		publicDomain: "https://development.eseme.one:61983",
		successRoute: "/generate-customer-success-route",
		cancelRoute: "/generate-customer-cancel-route",
		paymentMethodId: paymentMethod.id,
		testClockId: testClock.id,
	};
	const result1 = await tsb.generateCustomer(body);
	const customer = result1.payload.customer;
	if (debugMode) tickLog.info(`customer: ${JSON.stringify(customer, null, 2)}`);

	const response3 = await tsb.generateSubscription({
		applicationCustomerId: l_applicationCustomerId,
		recurringPriceId: priceData.id,
		description: description,
	});
	expect(response3.payload.latest_invoice.length).toBeGreaterThan(0);

	const advanceMonth1 = await stripe.testHelpers.testClocks.advance(
		testClock.id,
		{ frozen_time: clockNextMonth1 }
	);

	// do while loop to check current state of clock until it is completed
	let curState;
	do {
		curState = await stripe.testHelpers.testClocks.retrieve(testClock.id);
		if (debugMode) tickLog.info(`curState: ${JSON.stringify(curState, null, 2)}`);
		// sleep 1 second
		await new Promise(r => setTimeout(r, 1000));
	} while (curState.status !== 'ready');

	const advanceMonth2 = await stripe.testHelpers.testClocks.advance(
		testClock.id,
		{ frozen_time: clockNextMonth2 }
	);

	// do while loop to check current state of clock until it is completed
	let curState2;
	do {
		curState2 = await stripe.testHelpers.testClocks.retrieve(testClock.id);
		if (debugMode) tickLog.info(`curState: ${JSON.stringify(curState2, null, 2)}`);
		// sleep 1 second
		await new Promise(r => setTimeout(r, 1000));
	} while (curState2.status !== 'ready');

	const response4 = await tsb.getSubscriptionPayments({ 
		applicationCustomerId: l_applicationCustomerId,
	});
	if (debugMode) tickLog.info(`response4: ${JSON.stringify(response4, null, 2)}`);
	expect(response4.payload.length).toBe(2);
}, 130000);

