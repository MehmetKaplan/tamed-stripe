const tickLog = require("tick-log");
const tsb = require("../tamed-stripe-backend.js");

beforeAll(async () => {
	await tsb.init({
		debugMode: true,
		// coming from database-setup
		pgKeys: {
			user: 'tamedstripeapp',
			password: 'tamedstripeapp.', 
			database: 'tamedstripedb',
			host: 'localhost',
			port: 5432,
		},
	});
});

test('generateCustomer', async () => {
	let now = Date.now();
	let email = `${now}@yopmail.com`;
	let description = `Generated by JEST tests. Customer ${now}`;
	let metadata = {
		"testField": "testValue1",
		"testField2": "testValue2"
	};
	let name = `Customer ${now}`;
	let phone = `+1 555 555 5555`;
	let address =
	{
		city: "San Francisco",
		country: "US",
		line1: "1234 Main Street",
		line2: "Apt. 4",
		postal_code: "94111",
		state: "CA"
	}
	const props = {
		description, email, metadata, name, phone, address
	};
	let response1 = await tsb.generateCustomer(props);
	let customerData = response1.payload;
	tickLog.info(`Customer generated with following significant information:\n   id:                  ${customerData.id}\n   object:              ${JSON.stringify(customerData.object)}\n   email:               ${customerData.email}\n   metadata:            ${JSON.stringify(customerData.metadata)}\n   name:                ${customerData.name}\n   phone:               ${customerData.phone}\n   address:             ${JSON.stringify(customerData.address)}\n   livemode:            ${customerData.livemode}`, true);
	expect(customerData).toHaveProperty('id');
	expect(customerData).toHaveProperty('object');
	expect(customerData).toHaveProperty('description');
	expect(customerData).toHaveProperty('email');
	expect(customerData).toHaveProperty('livemode');
	expect(customerData).toHaveProperty('metadata');
	expect(customerData).toHaveProperty('name');
	expect(customerData).toHaveProperty('phone');
	expect(customerData).toHaveProperty('address');
	expect(customerData.email).toEqual(email);
});

test('generateAccount (connected account for payouts)', async () => {
	let now = Date.now();
	let email = `${now}@yopmail.com`;
	const props = {
		email: email,
	};
	let response1 = await tsb.generateAccount(props);
	let accountData = response1.payload;
	tickLog.info(`Account generated with following significant information:\n   id:                  ${accountData.id}\n   type:                ${accountData.type}\n   capabilities:        ${JSON.stringify(accountData.capabilities)}\n   email:               ${accountData.email}\n   Payment Schedule:    ${JSON.stringify(accountData.settings.payouts.schedule)}`, true);
	expect(accountData.id).not.toBeNull();
	expect(accountData.type).toEqual('express');
	// jest compare object
	expect(accountData.capabilities).toEqual({ "card_payments": "inactive", "transfers": "inactive" });
	expect(accountData.email).toEqual(email);
	expect(accountData.settings.payouts.schedule.interval).toEqual('daily');
});

test('paymentSheetHandler normal payment', async () => {
	let now = Date.now();
	let email = `${now}@yopmail.com`;
	let description = `Generated by JEST tests. Customer ${now}`;
	let metadata = {
		"testField": "testValue1",
		"testField2": "testValue2"
	};
	let name = `Customer ${now}`;
	let phone = `+1 555 555 5555`;
	let address =
	{
		city: "San Francisco",
		country: "US",
		line1: "1234 Main Street",
		line2: "Apt. 4",
		postal_code: "94111",
		state: "CA"
	}
	const props = {
		description, email, metadata, name, phone, address
	};
	let response1 = await tsb.generateCustomer(props);
	let customerData = response1.payload;
	tickLog.info(`Customer generated with following significant information:\n   id:                  ${customerData.id}\n   object:              ${JSON.stringify(customerData.object)}\n   email:               ${customerData.email}\n   metadata:            ${JSON.stringify(customerData.metadata)}\n   name:                ${customerData.name}\n   phone:               ${customerData.phone}\n   address:             ${JSON.stringify(customerData.address)}\n   livemode:            ${customerData.livemode}`, true);
	let customerId = customerData.id;
	let payInAmount = 1000;
	let currency = 'usd'
	//let transferData
	//let payoutData
	// 		let { customerId, payInAmount, currency, transferData, payoutData } = props;
	let paymentSheet_ = await tsb.paymentSheetHandler({ customerId, payInAmount, currency });
	let paymentSheet = paymentSheet_.payload;
	tickLog.info(`Generated Payment Sheet: ${JSON.stringify(paymentSheet)}}`, true);
	expect(paymentSheet).toHaveProperty('paymentIntent');
	expect(paymentSheet).toHaveProperty('ephemeralKey');
	expect(paymentSheet).toHaveProperty('customer');
	expect(paymentSheet).toHaveProperty('publishableKey');
	expect(paymentSheet.customer).toBe(customerId);
});

test('paymentSheetHandler payment with payout', async () => {
	let now = Date.now();
	let email = `${now}@yopmail.com`;
	let description = `Generated by JEST tests. Customer ${now}`;
	let metadata = {
		"testField": "testValue1",
		"testField2": "testValue2"
	};
	let name = `Customer ${now}`;
	let phone = `+1 555 555 5555`;
	let address =
	{
		city: "San Francisco",
		country: "US",
		line1: "1234 Main Street",
		line2: "Apt. 4",
		postal_code: "94111",
		state: "CA"
	}
	const props = {
		description, email, metadata, name, phone, address
	};
	let response1 = await tsb.generateCustomer(props);
	let customerData = response1.payload;
	tickLog.info(`Customer generated with following significant information:\n   id:                  ${customerData.id}\n   object:              ${JSON.stringify(customerData.object)}\n   email:               ${customerData.email}\n   metadata:            ${JSON.stringify(customerData.metadata)}\n   name:                ${customerData.name}\n   phone:               ${customerData.phone}\n   address:             ${JSON.stringify(customerData.address)}\n   livemode:            ${customerData.livemode}`, true);
	let now2 = Date.now() + '-connected-account';
	let email2 = `${now2}@yopmail.com`;
	const props2 = {
		email: email2,
	};
	let response2 = await tsb.generateAccount(props2);
	let accountData = response2.payload;
	tickLog.info(`Account generated with following significant information:\n   id:                  ${accountData.id}\n   type:                ${accountData.type}\n   capabilities:        ${JSON.stringify(accountData.capabilities)}\n   email:               ${accountData.email}\n   Payment Schedule:    ${JSON.stringify(accountData.settings.payouts.schedule)}`, true);
	let customerId = customerData.id;
	let payInAmount = 1000; // total amount to be chaged to CUSTOMER
	let currency = 'usd'
	let payoutData = {
		amount: 877, // partner's share
		destination: accountData.id, // CONNECTED ACCOUNT id
	 };
	let paymentSheet_ = await tsb.paymentSheetHandler({ customerId, payInAmount, currency, payoutData  });
	let paymentSheet = paymentSheet_.payload;;
	tickLog.info(`Generated Payment Sheet: ${JSON.stringify(paymentSheet)}}`, true);
	expect(paymentSheet).toHaveProperty('paymentIntent');
	expect(paymentSheet).toHaveProperty('ephemeralKey');
	expect(paymentSheet).toHaveProperty('customer');
	expect(paymentSheet).toHaveProperty('publishableKey');
	expect(paymentSheet.customer).toBe(customerId);
});
