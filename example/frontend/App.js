import { useState, useEffect } from 'react';
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View, Button, TextInput, Alert } from 'react-native';

import { init, generateCustomer, CustomerWebView, generateProduct, generateSubscription, generateAccount, AccountWebView, } from './functions.js';

export default function App() {
	const [customerId, setCustomerId] = useState('');

	const [email, setEmail] = useState('');

	const [subscriptionName, setSubscriptionName] = useState('');
	const [subscriptionCharge, setSubscriptionCharge] = useState(0);

	const [accountLinkUrl, setAccountLinkUrl] = useState('');
	const [customerCheckoutSessionUrl, setCustomerCheckoutSessionUrl] = useState('');


	useEffect(() => {
		init({
			apiBackend: "https://development.eseme.one:61983",
			routes: {
				"generateCustomer": "/generate-customer",
				"generateProduct": "/generate-product",
				"generateSubscription": "/generate-subscription",
				"generateAccount": "/generate-account"
			},
			debugMode: true
		});
	}, []);

	const generateCustomer_ = async () => {
		const result = await generateCustomer({
			"description": "Generated by JEST tests. Customer 1676290904050",
			"email": email,
			"metadata": {
				"testField": "testValue1",
				"testField2": "testValue2"
			},
			"name": "Customer 1676290904050",
			"phone": "+1 555 555 5555",
			"address": {
				"city": "Istanbul",
				"country": "TR",
				"line1": "1234 Main Street",
				"line2": "Apt. 4",
				"postal_code": "94111",
				"state": "CA"
			},
			"publicDomain": "https://development.eseme.one:61983",
			"successRoute": "/generate-customer-success-route",
			"cancelRoute": "/generate-customer-cancel-route",
		});
		setCustomerCheckoutSessionUrl(result.payload.checkoutSession.url);
		setCustomerId(result.payload.customer.id);
	};

	const generateSubscription_ = async () => {
		const resultProduct = await generateProduct({
			name: subscriptionName,
			description: subscriptionName,
			currency: 'usd',
			unitAmountDecimal: subscriptionCharge * 100, // Stripe expects amount in cents
			interval: 'month',
		});
		const resultSubscription = await generateSubscription({
			customerId: customerId,
			recurringPriceId: resultProduct.payload.price.id,
		});
		Alert.alert(`Login to your Stripe account to check the results for the customer with email ${email}`)
	}

	const generateAccount_ = async () => {
		// Stripe generate account and let user complete the process
		const account = await generateAccount({
			"email": "1676290904050@yopmail.com",
			"publicDomain": "https://development.eseme.one:61983",
			"refreshUrlRoute": "/account-authorize",
			"returnUrlRoute": "/account-generated",
			"country": "TR",
		});

		setAccountLinkUrl(account.payload.accountLinkURL);
	};

	const generateCustomerBlock = customerId.length === 0
		? <View style={{ borderColor: '#693', borderWidth: 1, borderRadius: 10, width: '68%', alignItems: 'center' }}>
			<Text> </Text>
			<TextInput
				placeholder="Email"
				onChangeText={text => setEmail(text)}
				value={email}
				style={{ padding: 10, borderWidth: 1, borderRadius: 5, width: '98%' }}
			/>
			<Text> </Text>
			<Button
				title={`Generate Customer\n&\nPayment Method`}
				onPress={generateCustomer_}
			/>
		</View>
		: <></>;

	const generateSubscriptionBlock = customerId.length === 0
		? <></>
		: <View style={{ borderColor: '#693', borderWidth: 1, borderRadius: 10, width: '68%', alignItems: 'center' }}>
			<Text> </Text>
			<TextInput
				placeholder="Subscription Name"
				onChangeText={text => setSubscriptionName(text)}
				value={subscriptionName}
				style={{ padding: 10, borderWidth: 1, borderRadius: 5, width: '98%' }}
			/>
			<Text> </Text>
			<TextInput
				placeholder="Subscription Charge"
				onChangeText={text => setSubscriptionCharge(text)}
				value={subscriptionCharge}
				style={{ padding: 10, borderWidth: 1, borderRadius: 5, width: '98%' }}
			/>
			<Text> </Text>
			<Button
				title="Generate Subscription"
				onPress={generateSubscription_}
			/>
			<Text> </Text>
		</View>;

	// MODIFYME
	const generateAccountBlock = customerId.length === 0
		? <></>
		: <View style={{ borderColor: '#693', borderWidth: 1, borderRadius: 10, width: '68%', alignItems: 'center' }}>
			<Text> </Text>
			<Button
				title="Generate Account"
				onPress={generateAccount_}
			/>
			<Text> </Text>
		</View>;

	let screen = <View style={styles.container}>
		<StatusBar style="auto" />
		{generateCustomerBlock}
		{generateSubscriptionBlock}
		{generateAccountBlock}
		<Text> </Text>
		<Text> </Text>
	</View>;

	if (accountLinkUrl.length > 0) screen = <AccountWebView
		accountLinkUrl={accountLinkUrl}
		setAccountLinkUrl={setAccountLinkUrl}
	/>;

	if (customerCheckoutSessionUrl.length > 0) screen = <CustomerWebView
		customerCheckoutSessionUrl={customerCheckoutSessionUrl}
		setCustomerCheckoutSessionUrl={setCustomerCheckoutSessionUrl}
	/>;

	return screen;
}

const styles = StyleSheet.create({
	container: {
		flex: 1,
		backgroundColor: '#fff',
		alignItems: 'center',
		justifyContent: 'center',
	},
});
